# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17GWGQP5hoPWCbv22jLCdDUqK6fTEK0pe
"""

def hajMashti(att: str) -> str:
  """
  Get a user attribiute and return Haji, Karbalayee, Mashti or Agha.

  Args:
    att (str): User attribiute.

  Returns:
    str: Haji, Karbalayee, Mashti or Agha.
  """
  if len(att) == 3:
    if att[0] and att[1] and att[2] in ["y", "Y", "n", "N"]:
      if att[0].lower() == "y":
        return "Haji"
      elif att[1].lower() == "y":
        return "Karbalayee"
      elif att[2].lower() == "y":
        return "Mashti"
      elif att[0] and att[1] and att[2] == "n":
        return "Agha"
    else:
      return "Invalid input length"
  else:
    return "Invalid input value"

print(hajMashti("yy"))

def su(*number: tuple) -> int:
  """
  Get a number and return the sum of its digits.

  Args:
    number (int): Number to sum.

  Returns:
    int: Sum of digits.
  """
  sum = 0
  for i in number:
    sum += int(i)
  return sum

nums = input().split()
print(su(*nums))

def sums(a: float, b:float) -> float:
  """
  Get two numbers and return their sum.

  Args:
    a (float): First number.
    b (float): Second number.

  Returns:
    float: Sum of numbers.
  """
  return a + b


def sub(a: float, b:float) -> float:
  """
  Get two numbers and return their difference.

  Args:
    a (float): First number.
    b (float): Second number.

  Returns:
    float: Difference of numbers.
  """
  return a - b


def mult(a: float, b:float) -> float:
  """
  Get two numbers and return their product.

  Args:
    a (float): First number.
    b (float): Second number.

  Returns:
    float: Product of numbers.
  """
  return a * b


def div(a: float, b:float) -> float:
  """
  Get two numbers and return their quotient.

  Args:
    a (float): First number.
    b (float): Second number.

  Returns:
    float: Quotient of numbers.
  """
  if b == 0:
    return "Can not division by zero"
  else:
    return a / b

num1 = float(input("enter first number: "))
op = input("enter operator: ")
num2 = float(input("enter second number: "))

if op == "+":
  print(sums(num1, num2))
elif op == "-":
  print(sub(num1, num2))
elif op == "*":
  print(mult(num1, num2))
elif op == "/":
  print(div(num1, num2))
else:
  print("Invalid operator")

print(eval(input("enter a sequense: ")))

def sums(a: float, b:float) -> float:
  return a + b

x = lambda a, b : a + b
print(x(5, 6))

x = lambda a, b : a + b; print(x(5, 6))

print(y := lambda : "Hello World")

s = []
for i in range(1, 11):
  s.append(i)
s

s = [i for i in range(1, 11)]
s

y = [i**2 for i in range(10, 31) if i % 2 == 0]
y

s1 = [1, 2, 3]
s2 = [4, 2, 3]
z = [(i, j) for i in s1 for j in s2 if i != j]
z

matrix = [
    [1, 2, 3, 4],
    [5, 6, 7, 8],
    [9, 10, 11, 12]
]

print("Normal:")
t = []
for i in range(4):
    t_row = []
    for row in matrix:
        t_row.append(row[i])
    t.append(t_row)
for j in t:
    print(j)

print("Transpose:")

matrix = [
    [1, 2, 3, 4],
    [5, 6, 7, 8],
    [9, 10, 11, 12]]
print("Comprehension:")
t2 = [[row[i] for row in matrix] for i in range(4)]
t2

